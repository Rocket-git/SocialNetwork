{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","React","Component","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileInfo","profile","src","className","s","descriptionBlock","photos","large","fullName","Preloader","Post","item","message","likesCount","MyPosts","memo","postsElements","posts","reverse","map","p","createRef","postsBlock","PostReduxForm","onSubmit","values","addPost","newPostElement","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.2d086e38.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1afw4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2-L5c\",\"posts\":\"MyPosts_posts__2tfNt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3zy80\"};","import React from 'react';\r\n\r\nclass ProfileStatus extends React.Component {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    onStatusChange = (e) => {\r\n        this.setState({ status: e.currentTarget.value })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || '-------'}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} \r\n                               autoFocus={true} \r\n                               onBlur={this.deactivateEditMode} \r\n                               value={this.state.status}></input>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus\r\n","import React, { useState } from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport { useEffect } from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status] )\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={ activateEditMode }>{props.status || '-------'}</span>\r\n                </div>\r\n            }\r\n            { editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur={deactivateEditMode} value={status}></input>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from '../../common/preloader/Preloader';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSeWpmXXoBgTPZq5yzd-CsER-HTNbyEq8CtRaSReqBCVDI1Or-F' />\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large} />\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n                <div>{profile.fullName}</div>\r\n    </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSAfg5V8mpkvC6fMCh02zEfvNWW2Kq324PKCUgKkSmFwYtwI8Oi' />\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post'\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst MyPosts = React.memo (props => {\r\n        let postsElements =\r\n            [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post message={p.message} likesCount={p.likesCount} />)\r\n\r\n        let newPostElement = React.createRef()\r\n\r\n        let addNewPost = (values) => {\r\n            props.addPost(values.newPostElement);\r\n        }\r\n\r\n        return (\r\n            <div className={s.postsBlock}>\r\n                <h3>My posts</h3>\r\n                <div>\r\n                    <PostReduxForm onSubmit={addNewPost} />\r\n                </div>\r\n\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} >\r\n            <div>\r\n                <Field placeholder='Enter your message' name='newPostElement' component={Textarea}\r\n                    validate={[required, maxLength10]} />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst PostReduxForm = reduxForm({ form: 'profileAddPostForm' })(AddPostForm)\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport { addPostActionCreator } from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostElement) => {\r\n            dispatch(addPostActionCreator(newPostElement))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, getStatus, updateStatus } from '../../redux/profile-reducer'\r\nimport { withRouter} from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n//        console.log('RENDER PROFILE')\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n//    console.log('mapStateToProps PROFILE');\r\n    return({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\r\n    withRouter\r\n) (ProfileContainer)"],"sourceRoot":""}